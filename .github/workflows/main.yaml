name: contour action
on: 
  workflow_dispatch:
    inputs:
      deploy-to-eks:
        type: boolean
        required: false
        default: false

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: contour-app
  EKS_CLUSTER: contour-eks

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Maven test
        run: mvn test

      - name: Checkstyle
        run: mvn checkstyle:checkstyle
      
      - name: Set java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup sonarqube
        uses: warchant/setup-sonar-scanner@v7

      - name: Sonarqube scn
        run: |
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=src/ \
            -Dsonar.junit.reportsPath=target/surefire-reports/ \
            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account

        
      # - name: Sonarqube scan
      #   run: sonar-scanner
      #       -Dsonar.host.url=${{ secrets.SONAR_URL }}
      #       -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      #       -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
      #       -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
      #       -Dsonar.sources=src/
      #       -Dsonar.junit.reportsPath=target/surefire-reports/
      #       -Dsonar.jacoco.reportsPath=target/jacoco.exec
      #       -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
      #       -Dsonar.java.binaries=target/test-classes/com/visualpathit/account

      - name: Sonarqube quality gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }} 

  Build_And_Publish: 
    needs: Testing
    runs-on: ubuntu-latest
    steps: 
      - name: Code checkout
        uses: actions/checkout@v4
      - name: upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ env.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          tags: latest, ${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./
  Deploy_To_EKS:
    needs: Build_And_Publish
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.deploy-to-eks == 'true' }}
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get kube config file. We can give the path to the kubeconfig file '--kubeconfig ~/.kube/config'
        run: |
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.EKS_CLUSTER }}

      - name: Print kube config file
        run: |
          cat ~/.kube/config

      - name: Create kubernetes secreate
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server=${{ secrets.REGISTRY }} \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password)

      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.12
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: ${{ env.EKS_CLUSTER }}
          # config-files: .github/values/dev.yaml
          chart-path: helm/contourcharts
          namespace: default
          values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }}, apptag=${{ github.run_number }}
          name: contour-stack
           



